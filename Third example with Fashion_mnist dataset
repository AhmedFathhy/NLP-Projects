import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
import numpy as np

# fashion_mnist is a dataset of 28x28x1 grayscale images of fashion clothing
# labels: 0 - T-shirt/top, 1 - Trouser, 2 - Pullover, 3 - Dress, 4 - Coat, 5 - Sandal, 6 - Shirt, 7 - Sneaker, 8 - Bag, 9 - Ankle boot
# fashion_mnist.train.images is a 60000x28x28 numpy array
# fashion_mnist.train.labels is a 60000x1 numpy array
fashion_mnist = keras.datasets.fashion_mnist
(images_train, labels_train), (images_test, labels_test) = fashion_mnist.load_data()  # load the data
# print(f'images_train.shape: {images_train.shape}')
# print(f'length: {len(images_train)}')
# print(f'labels_train.shape: {labels_train.shape}')
# print(f'images_test.shape: {images_test.shape}')
# print(f'labels_test.shape: {labels_test.shape}')

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag',
               'Ankle boot']  # class names for the labels
# ----------------------------------------------------------------------------------------------------------------------

plt.figure()
plt.imshow(images_train[0], cmap='gray')  # plot the first image in the training set
plt.colorbar()  # show the color scale
plt.grid(False)  # hide the grid
plt.show()
# ----------------------------------------------------------------------------------------------------------------------

# scale or normalize the pixel values
images_train = images_train / 255.0
images_test = images_test / 255.0
# ----------------------------------------------------------------------------------------------------------------------

plt.figure(figsize=(10, 10))
for i in range(30):
    plt.subplot(6, 5, i+1)  # plot the first 30 images in the training set
    plt.xticks([])  # hide the x-axis tick marks
    plt.yticks([])  # hide the y-axis tick marks
    plt.grid(False)  # hide the grid
    plt.imshow(images_train[i], cmap='gray')  # plot the image in grayscale mode
    plt.xlabel(class_names[labels_train[i]])  # show the class name below the image in the x-axis
plt.show()
# ----------------------------------------------------------------------------------------------------------------------


# create a model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # flatten the input image into a 1D array
    keras.layers.Dense(128, activation='relu'),  # add a hidden layer with 128 neurons
    keras.layers.Dense(10, activation='softmax')  # add an output layer with 10 neurons
])
# ----------------------------------------------------------------------------------------------------------------------


# compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(images_train, labels_train, epochs=10)  # train the model
# ----------------------------------------------------------------------------------------------------------------------


# evaluate the model
test_loss, test_acc = model.evaluate(images_test, labels_test)  # evaluate the model on the test set
print(f'test_loss: {test_loss}')
print(f'test_acc: {test_acc}')
# ----------------------------------------------------------------------------------------------------------------------


# make predictions
predictions = model.predict(images_test)
print(predictions[0])
print(np.argmax(predictions[0]))  # get the index of the highest probability
print(f'test label: {labels_test[0]}')
# ----------------------------------------------------------------------------------------------------------------------


# plot the first X test images, their predicted label, and the true label
# correct predictions in green, incorrect predictions in red
def plot_image(i, predictions_array, true_label, img):
    predictions_array, true_label, img = predictions_array[i], true_label[i], img[i] # get the predictions, true label, and image for the i-th test image
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])

    plt.imshow(img, cmap='gray')

    predicted_label = np.argmax(predictions_array)  # get the index of the highest probability
    if predicted_label == true_label:  # if the predicted label is correct
        color = 'green'  # color the text green
    else:
        color = 'red'  # otherwise, color the text red

    plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                         100 * np.max(predictions_array),
                                         class_names[true_label]),
               color=color)  # show the predicted label and the true label



def plot_value_array(i, predictions_array, true_label):
    predictions_array, true_label = predictions_array[i], true_label[i] # get the predictions and true label for the i-th test image
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    this_plot = plt.bar(range(10), predictions_array, color="#777777")  # create a bar chart with the predictions as the height
    plt.ylim([0, 1])  # set the y-axis to be from 0 to 1
    predicted_label = np.argmax(predictions_array)  # get the index of the highest probability

    this_plot[predicted_label].set_color('red')  # color the predicted label red
    this_plot[true_label].set_color('green')  # color the true label green

# ----------------------------------------------------------------------------------------------------------------------


i = 0  # index of the test image
plt.figure(figsize=(6, 3))  # set the figure size
plt.subplot(1, 2, 1)  # create a subplot
plot_image(i, predictions, labels_test, images_test)  # plot the image
plt.subplot(1, 2, 2)  # create a subplot
plot_value_array(i, predictions, labels_test)  # plot the value array
plt.show()  # show the plot
# ----------------------------------------------------------------------------------------------------------------------


i = 711  # index of the test image
plt.figure(figsize=(6, 3))  # set the figure size
plt.subplot(1, 2, 1)  # create a subplot
plot_image(i, predictions, labels_test, images_test)  # plot the image
plt.subplot(1, 2, 2)  # create a subplot
plot_value_array(i, predictions, labels_test)  # plot the value array
plt.show()  # show the plot
# ----------------------------------------------------------------------------------------------------------------------
